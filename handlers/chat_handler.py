from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from config import MANAGER_IDS

from data.chat_storage_json import format_chat_history, get_active_chats_count, get_active_users_data, get_inactive_chats_count, get_inactive_users_data, get_receiver_id_status, get_waiting_count, get_waiting_users_data, load_chats, active_chats, save_chats
  

from utils.keyboards import InActive_chat_control_keyboard, InActive_chats_list_keyboard, active_chat_control_keyboard, admin_panel_keyboard, back_keyboard, back_to_admin_keyboard, confirm_keyboard, waiting_request_keyboard
from utils.states import ManagerState

chat_router = Router()



# –ö–æ–º–∞–Ω–¥–∞ /admin –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
@chat_router.message(Command("admin"))
@chat_router.callback_query(F.data == "admin")
async def admin_panel(event: object):
    message = event.message if isinstance(event, types.CallbackQuery) else event
    
    if event.from_user.id not in MANAGER_IDS:
        return
    
    admin_text = (
        f"<b>–ê–î–ú–ò–ù–ö–ê</b>\n\n"
        f"<i>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–∞—Ç–æ–≤/–∑–∞–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–µ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–¥ –Ω–∏–º–∏.</i>\n\n"
        # f"==============================\n"
        f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {get_active_chats_count()}\n"
        # f"------------------------------\n"
        f"üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {get_inactive_chats_count()}\n"
        # f"------------------------------\n"
        f"‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {get_waiting_count()}\n"
        # f"==============================\n"
        f"\n <b>–í—Å–µ–≥–æ —á–∞—Ç–æ–≤:</b> {get_inactive_chats_count() + get_waiting_count() + get_active_chats_count()}"
    )
    
    await message.answer(admin_text, reply_markup=admin_panel_keyboard())
    if isinstance(event, types.CallbackQuery):
        await event.answer()





# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ ---
@chat_router.callback_query(F.data == "admin_active_chats")
async def show_active_chats(callback: types.CallbackQuery):
    if callback.from_user.id not in MANAGER_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    chats = load_chats()
    active_users = get_active_users_data()


    if not active_users:
        await callback.message.edit_text("üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –Ω–µ—Ç.", reply_markup=back_to_admin_keyboard())
        await callback.answer()
        return

    text = "<b>üí¨ –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ—É –æ —á–∞—Ç–µ. </b>\n\n"
    for i, (uid, data) in enumerate(active_users, start=1):
        manager = data.get("manager")
        manager_name = manager.get("first_name", "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω")

        username = f"@{data['username']}" if data.get("username") else "‚Äî"
        text += f"{i}. üë§ {data['first_name']} ({username}) ‚Äî üßë‚Äçüíº {manager_name}\n"

    await callback.message.edit_text(text, reply_markup=InActive_chats_list_keyboard(active_users))
    await callback.answer()



# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ ---
@chat_router.callback_query(F.data == "admin_inactive_chats")
async def show_inactive_chats(callback: types.CallbackQuery):
    if callback.from_user.id not in MANAGER_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    chats = load_chats()
    inactive_users = get_inactive_users_data()


    if not inactive_users:
        await callback.message.edit_text("üì≠ –ù–µ–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –Ω–µ—Ç.", reply_markup=back_to_admin_keyboard())
        await callback.answer()
        return

    text = "<b>üîß –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ—É –æ —á–∞—Ç–µ.</b>\n\n"
    for i, (uid, data) in enumerate(inactive_users, start=1):
        manager = data.get("manager")
        manager_name = manager.get("first_name", "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω")

        username = f"@{data['username']}" if data.get("username") else "‚Äî"
        text += f"{i}. üë§ {data['first_name']} ({username}) ‚Äî üßë‚Äçüíº {manager_name}\n"

    await callback.message.edit_text(text, reply_markup=InActive_chats_list_keyboard(inactive_users))
    await callback.answer()





# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è ---
@chat_router.callback_query(F.data == "admin_waiting_requests")
async def show_waiting_requests(callback: types.CallbackQuery):
    if callback.from_user.id not in MANAGER_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    chats = load_chats()
    waiting_users = get_waiting_users_data()

    if not waiting_users:
        await callback.message.edit_text("üì≠ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=back_to_admin_keyboard())
        await callback.answer()
        return

    for uid, data in waiting_users:
        last_message = (
            data["chat_history"][-1]["text"] if data.get("chat_history") else "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"
        )

        text = (
            f"üí§ –û–∂–∏–¥–∞—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
            f"üë§ –ò–º—è: {data['first_name']}\n"
            f"üÜî ID: {uid}\n"
            f"üìõ Username: @{data['username'] if data['username'] else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> <i>{last_message}</i>"
        )

        await callback.message.answer(text, reply_markup=waiting_request_keyboard(uid))

    await callback.answer()



# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ ---
@chat_router.callback_query(F.data.startswith("view_chat_"))
async def view_chat(callback: types.CallbackQuery):
    if callback.from_user.id not in MANAGER_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    user_id = callback.data.split("_")[2]
    chats = load_chats()
    data = chats.get(user_id)
    is_active = False

    if not data:
        await callback.answer("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    manager = data.get("manager", None)

    username = f"@{data['username']}" if data.get("username") else "‚Äî"

    if data["status"] == "active":
        mark = 'üü¢'
        is_active = True
    else:
        mark = 'üî¥'

    text_lines = [
        f"<b>–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:</b>\n",
        f"üë§ {data['first_name']} ({username}) {mark}",
        f"üÜî ID: {user_id}",
        f"üßë‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä: {manager['first_name'] if manager else '‚Äî'}",
        "\n-------------------------------\n"
        "üìú <b>–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:</b>\n\n"
    ]

    history_lines = format_chat_history(user_id)
    text_lines.append(history_lines)
    
    # for msg in messages[-15:]:  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 —Å–æ–æ–±—â–µ–Ω–∏–π
    # for msg in messages:
    #     role = "üßë –ú–µ–Ω–µ–¥–∂–µ—Ä" if msg["role"] == "manager" else "üë§ "
    #     text_lines.append(f"{role}: {msg['text']}")

    text = "\n".join(text_lines)

    await callback.message.edit_text(text, reply_markup=InActive_chat_control_keyboard(uid=user_id, is_active=is_active))
    await callback.answer()



# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–∂–∏–¥–∞—é—â–µ–≥–æ ---
@chat_router.callback_query(F.data.startswith("history_request_"))
async def show_request_history(callback: types.CallbackQuery):
    if callback.from_user.id not in MANAGER_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    user_id = callback.data.split("_")[2]  # –ø–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
    chats = load_chats()
    
    if user_id not in chats:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    history_text = format_chat_history(user_id)

    await callback.message.answer(history_text, reply_markup=back_keyboard("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–ø—Ä–æ—Å—É", "admin_waiting_requests"))
    await callback.answer()


# --- –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ ---
@chat_router.callback_query(F.data.startswith("clear_chat_history_"))
async def clear_chat_history(callback: types.CallbackQuery):
    if callback.from_user.id not in MANAGER_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    user_id = callback.data.split("_")[3]  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chats = load_chats()
    is_active = False

    
    if user_id not in chats:
        await callback.answer("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    if chats[user_id]["chat_history"] == []:
        await callback.answer("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
        return
    
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    chats[user_id]["chat_history"] = []
    save_chats(chats)

    data = chats.get(user_id)

    if data["status"] == "active":
        mark = 'üü¢'
        is_active = True
    else:
        mark = 'üî¥'

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏
    manager = chats[user_id].get("manager", None)
    username = f"@{chats[user_id]['username']}" if chats[user_id].get("username") else "‚Äî"

    text = (
        f"<b>–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:</b>\n"
        f"üë§ {data['first_name']} ({username}) {mark}"
        f"üÜî ID: {user_id}"
        f"üßë‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä: {manager['first_name'] if manager else '‚Äî'}"
        "\n-------------------------------\n"
        "üìú <b>–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:</b>\n\n"
        "üóë –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞."
    )

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        text,
        reply_markup=InActive_chat_control_keyboard(is_active=is_active, uid=user_id)
    )

    await callback.answer("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞")





# –ö–æ–º–∞–Ω–¥–∞ /admin –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
@chat_router.message(Command("my_status"))
@chat_router.callback_query(F.data == "admin_my_status")
async def check_my_status(event: object):
    message = event.message if isinstance(event, types.CallbackQuery) else event
    chats = load_chats()

    myid = event.from_user.id
    
    if myid not in MANAGER_IDS:
        return
    
    print("myid:", myid)
    my_status = "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã"

    key = f"{myid}_active"
    if key in active_chats:
        receiver_id, _= get_receiver_id_status(key)
        my_status = "–ê–∫—Ç–∏–≤–Ω—ã"
        receiver_first_name = chats.get(str(receiver_id), {}).get("first_name", "–ë–µ–∑ –∏–º–µ–Ω–∏")

        text = (
            f"üü¢ <b>{my_status}</b> —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º <b>{receiver_first_name}</b>."
        )
    else:
        text = (
            f"üî¥ <b>{my_status}</b>."
        )

    await message.answer(text, reply_markup=back_keyboard("–ê–¥–º–∏–Ω–∫–∞", "admin"))
    if isinstance(event, types.CallbackQuery):
        await event.answer()

