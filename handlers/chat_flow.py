from aiogram import Bot, types, F
from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command

from common.utils_funcs import msg_is_sent
from config import MANAGER_IDS
from data.chat_storage_json import add_message, assign_manager, end_chat, load_chats, save_chats,  update_chats_cache, active_chats, get_receiver_id_status


from utils.keyboards import manager_online_keyboard, new_message_keyboard
from utils.states import ManagerState, UserState

flow_router = Router()


# --- –ù–∞—á–∞–ª–æ —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ---
@flow_router.callback_query(F.data.startswith("start_chat_"))
async def start_chat(callback: types.CallbackQuery):
    manager_id = callback.from_user.id

    if manager_id not in MANAGER_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

     # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ user_id
    try:
        user_id = callback.data.split("_")[2]
    except IndexError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏")
        return
    
    chats = load_chats()
    if user_id not in chats:
        await callback.answer("<i>‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</i>")
        return
    
    key = f"{manager_id}_active" 
    if key in active_chats:
        current_user_id, _ = get_receiver_id_status(key)

        end_chat(str(current_user_id))

        await callback.message.answer(
            f"<i>üî¥ –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {chats[str(current_user_id)]['first_name']} –∑–∞–≤–µ—Ä—à—ë–Ω.</i>\n"
            f"<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã.</i>"
            )
        try:
            await callback.bot.send_message(int(current_user_id), "<i>üî¥ <b>–ß–∞—Ç –±—ã–ª –∑–∞–≤–µ—Ä—à—ë–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.</b>\n\n–°–Ω–æ–≤–∞ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º - /contact_manager.</i>")
        except:
            pass


    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    assign_manager(user_id, callback.from_user, "active")
    
    
    chats = load_chats()
    
    chats[user_id]["status"] = "active"
    # chats[user_id]["manager"]["status"] = "active"

    
    save_chats(chats)
    update_chats_cache()

    await callback.message.answer(
        f"<i>‚úÖ –í—ã –Ω–∞—á–∞–ª–∏ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º <b>{chats[user_id]['first_name']}</b>.</i>\n\n"
        f"<i>–¢–µ–ø–µ—Ä—å –µ–≥–æ –∏ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥ –¥—Ä—É–≥—É –≤ –±–æ—Ç–∞.</i>\n"
        f"<i>–ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è —Å–∞–º–æ–º—É –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞—è–≤–∫–∏, –Ω–∞–∂–º–∏—Ç–µ <u>–í—ã–π—Ç–∏ –∏–∑ –æ–Ω–ª–∞–π–Ω</u>, –æ—Ç–∫–ª—é—á–∏—Ç—å –æ–±–æ–∏—Ö - <u>–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç</u></i>",
        reply_markup=manager_online_keyboard(user_id)
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await callback.bot.send_message(
            int(user_id),
            "<i>üü¢ –ú–µ–Ω–µ–¥–∂–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∏–ª –æ–Ω–ª–∞–π–Ω —Å–≤—è–∑—å. –ú–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.</i>"
        )
    except:
        pass

    await callback.answer("–ß–∞—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")

# --- –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç.–µ. —Å—Ç–∞—Ç—É—Å = active –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å —ç—Ç–∏–º —é–∑–µ—Ä–æ–º ---
@flow_router.callback_query(F.data.startswith("manager_activate_chat_"))
async def manager_activate_chat(callback: types.CallbackQuery):
    if callback.from_user.id not in MANAGER_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    user_id = callback.data.split("_")[3]
    chats = load_chats()
    if user_id not in chats:
        await callback.answer("<i>‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</i>")
        return
    key = f"{callback.from_user.id}_active"
    if key in active_chats:
        curr_active_user, _ = get_receiver_id_status(key)
        await callback.message.answer(f'<i>üü¢ –í—ã —É–∂–µ –Ω–∞ —Å–≤—è–∑–∏ —Å {chats[str(curr_active_user)]["first_name"]}.</i>')
        await callback.answer()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    chats[user_id]["manager"]["status"] = "active"


    # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # –ü–û–ö–ê –ß–¢–û –¢–ê–ö, –ú–û–ñ–ï–¢ –ò –í–°–ï–ì–î–ê –¢–ê–ö
    chats[user_id]["status"] = "active"

    
    save_chats(chats)
    update_chats_cache()


    await callback.message.answer(
        f"<i>üü¢<b> –í—ã —Å–Ω–æ–≤–∞ –≤ –æ–Ω–ª–∞–π–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chats[user_id]['first_name']}</b>.</i>\n\n"
        f"<i>–ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è —Å–∞–º–æ–º—É –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞—è–≤–∫–∏, –Ω–∞–∂–º–∏—Ç–µ <u>–í—ã–π—Ç–∏ –∏–∑ –æ–Ω–ª–∞–π–Ω</u>.\n–û—Ç–∫–ª—é—á–∏—Ç—å –æ–±–æ–∏—Ö - <u>–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç</u></i>",
        reply_markup=manager_online_keyboard(user_id)
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await callback.bot.send_message(
            int(user_id),
            "<i>üü¢ –ú–µ–Ω–µ–¥–∂–µ—Ä –≤ —á–∞—Ç–µ.</i>"
        )
    except:
        pass
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞

    await callback.answer("–ß–∞—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")


# --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–∞—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º---
@flow_router.callback_query(F.data.startswith("end_chat_"))
async def manager_end_chat(callback: types.CallbackQuery):

    if callback.from_user.id not in MANAGER_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    user_id = callback.data.split("_")[2]
    chats = load_chats()
    if user_id not in chats:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    end_chat(user_id)

    await callback.message.answer(
        f"<i>üî¥ –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {chats[user_id]['first_name']} –∑–∞–≤–µ—Ä—à—ë–Ω.</i>\n"
        f"<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã.</i>"
        )
    try:
        await callback.bot.send_message(int(user_id), "<i>üî¥ <b>–ß–∞—Ç –±—ã–ª –∑–∞–≤–µ—Ä—à—ë–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.</b>\n\n–°–Ω–æ–≤–∞ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º - /contact_manager.</i>")
    except:
        pass
    

    await callback.answer()
    


# --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ---
@flow_router.message(Command("end_chat"))
async def user_end_chat(message: types.Message):
    user_id = str(message.from_user.id)
    chats = load_chats()
    if user_id not in chats or chats[user_id].get("status", "inactive") == "inactive":
        await message.answer("<i>‚ùå –í—ã –Ω–µ –≤ –æ–Ω–ª–∞–π–Ω —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.</i>")
        return
    manager_id = chats[user_id]["manager"]["id"]

    end_chat(user_id)

    await message.answer(
        "<i>üî¥ <b>–ß–∞—Ç –±—ã–ª –∑–∞–≤–µ—Ä—à—ë–Ω –í–∞–º–∏.</b>\n\n–ï—Å–ª–∏ —É –í–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /contact_manager</i>"
        )
    try:
        await message.bot.send_message(int(manager_id),
        f"<i>üî¥ –ß–∞—Ç —Å {chats[user_id]['first_name']} –±—ã–ª –∑–∞–≤–µ—Ä—à—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –æ–±–æ–∏—Ö.</i>\n"
        f"<i><b>{chats[user_id]['first_name']}</b> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã.</i>")
    except:
        pass



# --- –í—ã—Ö–æ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞ ---
@flow_router.callback_query(F.data.startswith("leave_chat_"))
async def leave_chat(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in MANAGER_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    user_id = callback.data.split("_")[2]
    chats = load_chats()
    if user_id not in chats:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.answer()
        return
    
    if chats[user_id]["manager"]["status"] == "inactive":
        await callback.answer("‚ùå –í—ã –Ω–µ –æ–Ω–ª–∞–π–Ω")
        return
    
    
    # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º —á–∞—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ "–æ—Ç–∫–ª—é—á–∞–µ–º" –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    chats[user_id]["manager"]["status"] = "inactive"

    save_chats(chats)
    update_chats_cache()

    await callback.message.answer(f'<i>üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –æ–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞ —Å { chats[user_id]["first_name"]} –¥–ª—è —Å–µ–±—è.</i>')
    await callback.answer()

    try:
        await callback.bot.send_message(
            int(user_id),
            "<i>üïì –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–æ—à–µ–ª..</i>\n\n" \
            "<i>–ü—Ä–µ—Ä–≤–∞—Ç—å —Å–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º - /end_chat</i>"
        )
    except:
        pass


@flow_router.message(UserState.in_chat_with_manager)
async def handle_user_message(message: types.Message):
    user_id = str(message.from_user.id)
    chats = load_chats()
    if user_id not in chats:
        return  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ JSON

    data = chats[user_id]
    add_message(user_id, message, role="user")  # –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é

    manager = data.get("manager")
    if not manager:
        await message.answer("<i>‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ - /contact_manager</i>")
        return

    manager_id = manager["id"]
    manager_status = manager.get("status", "inactive")

    # –ï—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É
    # –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –µ–≥–æ

    await message.bot.send_message(
        manager_id,
        # (@{data.get('username','–Ω–µ —É–∫–∞–∑–∞–Ω')})
        f"<i>üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <b>{data['first_name']}</b>:<i>\n"
        f"{message.text or '<i>[–º–µ–¥–∏–∞]</i>'}",
        reply_markup=new_message_keyboard(user_id)
    )

    add_message(user_id, message, role="user")
    save_chats(chats)
    update_chats_cache()


@flow_router.message(ManagerState.in_chat_with_user)
async def handle_manager_message(message: types.Message):


    # –ò—â–µ–º, —Å –∫–µ–º —É —ç—Ç–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
    managers_active_uid = ManagerState.manager_active_with
    
    if not managers_active_uid:
        await message.answer("<i>‚ö† –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å.</i>")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    add_message(managers_active_uid, message, role="manager")

    prefix = f"üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä {message.from_user.first_name}:"

    try:
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ª—é–±—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π

        await message.bot.copy_message(
            chat_id=int(managers_active_uid),
            from_chat_id=message.chat.id,
            message_id=message.message_id
        )
        await message.answer("<i>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ üõ´</i>")


    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", e)




@flow_router.message()
async def handle_all_messages(message: types.Message):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text and message.text.startswith("/"):
        return

    sender_id = str(message.from_user.id)
    chats = load_chats()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    is_manager = False
    if message.from_user.id in MANAGER_IDS:
        is_manager = True
    elif sender_id not in chats:
        raise KeyError(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sender_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ chats.json")
    
    # –ò—â–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å
    receiver_id = None
    receiver_status = None
    

    # –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∏–π –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ
    key = f"{sender_id}_active" 
    if key in active_chats:
        
        # –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        receiver_id, receiver_status = get_receiver_id_status(key)

        # –ü–æ–ª—É—á–∞—Ç–µ–ª—å –µ—Å—Ç—å, –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        if is_manager and receiver_id:

            try:
                print(active_chats)

                await message.bot.copy_message(
                    chat_id=receiver_id,
                    from_chat_id=message.chat.id,
                    message_id=message.message_id
                )
                await msg_is_sent(message, receiver_id)
                add_message(receiver_id, message, role="manager")


            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ", e)

        # –ü–æ–ª—É—á–∞—Ç–µ–ª—å –µ—Å—Ç—å, –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç —é–∑–µ—Ä–∞
        elif receiver_id:
            if receiver_status == "active":
                # –º–µ–Ω–µ–¥–∂–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω, –ø–µ—Ä–µ—à–ª–µ–º –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    # print(active_chats)

                    await message.bot.forward_message(
                        chat_id=receiver_id,
                        from_chat_id=message.chat.id,
                        message_id=message.message_id
                    )
                    # await message.bot.send_message(
                    #     receiver_id,
                    #     f"üë§ <b>{chats[sender_id]['first_name']}</b>:\n{message.text or '[üìÉ –Ω–µ —Ç–µ–∫—Å—Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]'}"
                    # )
                    await msg_is_sent(message, receiver_id)

                    # –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ–¥–∏–∞, –∏—Å–ø–æ–ª—å–∑—É—è file_id
                    add_message(receiver_id, message, role="user")

                except Exception as e:
                    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É: ", e)


            elif receiver_status == "inactive":
                # –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –µ–≥–æ
                try:
                    await message.bot.send_message(
                        receiver_id,
                        # (@{data.get('username','–Ω–µ —É–∫–∞–∑–∞–Ω')})
                        f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <b>{chats[sender_id]['first_name']}</b> :\n"
                        f"{message.text or '<i>[–º–µ–¥–∏–∞]</i>'}",
                        reply_markup=new_message_keyboard(sender_id)
                    )
                    await msg_is_sent(message, receiver_id)
                    add_message(receiver_id, message, role="user")
                except Exception as e:
                    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É:", e)
            else:
                raise ValueError(receiver_status, "–¢–∞–∫–æ–π —Å—Ç–∞—Ç—É—Å (–º–µ–Ω–µ–¥–∂–µ—Ä–∞) –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.")
        else:
            if is_manager:
                await message.answer("<i>‚ùå –¢–∞–∫–æ–π —Å–≤—è–∑–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä --> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>–Ω–µ—Ç</b>. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</i>")
            else:
                await message.answer("<i>‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ - /contact_manager</i>")
    # –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∏–π –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ
    else:
        if is_manager:
            await message.answer("<i>‚ö† –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.</i>")
        else:
            await message.answer("<i>‚ö† –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.\n\n/contact_manager –¥–ª—è —Å–≤—è–∑–∏ üìû</i>")