import os
from aiogram import F, Router, types
from aiogram.filters import Command
from config import MANAGER_IDS
from data.chat_storage_json import load_chats, save_chats, update_chats_cache
from utils.keyboards import InActive_chat_control_keyboard, back_keyboard, cities_keyboard, confirm_keyboard

confirmations_router = Router()


# --- –ü–û–î–¢–í. –£–î–ê–õ–ï–ù–ò–ï –ó–ê–ü–†–û–°–ê ---
@confirmations_router.callback_query(F.data.startswith("confirm_delete_request_"))
async def confirm_delete_request(callback: types.CallbackQuery):
    if callback.from_user.id not in MANAGER_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    user_id = callback.data.split("_")[3]  # –ø–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
    chats = load_chats()
    
    if user_id not in chats:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if chats[user_id]["status"] != "waiting":
        await callback.answer(f'–ï–≥–æ —Å—Ç–∞—Ç—É—Å: {chats[user_id]["status"]}\n–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        return

    await callback.message.answer("<i><b>‚ùó‚ùó –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø—Ä–æ—Å?</b>\n–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, —É –í–∞—Å –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∏–∫–∞–∫–∏–µ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ.</i>", reply_markup=confirm_keyboard(confirm_cb_name="confirmed_delete_request", uid=user_id))

    await callback.answer()


@confirmations_router.callback_query(F.data.startswith("confirmed_delete_request_"))
async def confirmed_delete_request(callback: types.CallbackQuery):
    if callback.from_user.id not in MANAGER_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    user_id = callback.data.split("_")[3]  # –ø–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
    chats = load_chats()
    if user_id not in chats:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    chat_data = chats[user_id]
    manager = chat_data.get("manager")
    chat_history = chat_data.get("chat_history", [])
    if chat_history == []:
        callback.answer("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
        return

    # --- –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º ---
    try:
        await callback.message.delete()
    except Exception:
        pass

    # --- –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞, —É–¥–∞–ª—è–µ–º –≤–µ—Å—å —á–∞—Ç ---
    if not manager:
        del chats[user_id]
        save_chats(chats)
        await callback.message.answer(
            f"‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{chat_data.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}</b> –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—ë–Ω."
        )

    # --- –ï—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —á–∞—Ç ---
    else:
        chat_data["status"] = "inactive"
        if chat_history:
            chat_data["chat_history"].pop(-1)  # —É–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        chats[user_id] = chat_data
        save_chats(chats)
        update_chats_cache()

        await callback.message.answer(
            f"üïä –ó–∞–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω."
        )
        # await callback.message.answer

    # --- –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫ —Å–ø–∏—Å–∫—É –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ---
    await callback.message.answer(
        "‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫",
        reply_markup=back_keyboard("üìã –ö —Å–ø–∏—Å–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤", "admin_waiting_requests")
    )

    await callback.answer()

# ----------------------------------------------------------





# --- –ü–û–î–¢–í. –í–´–•–û–î –ò–ó –û–ù–õ–ê–ô–ù –ß–¢–û–ë–´ –ù–ê–ß–ê–¢–¨ –ù–û–í–´–ô –û–ù–õ–ê–ô–ù ---
@confirmations_router.callback_query(F.data.startswith("confirm_leave_user_"))
async def confirm_leave_user(callback: types.CallbackQuery):
    if callback.from_user.id not in MANAGER_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    user_id = callback.data.split("_")[3]  # –ø–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
    chats = load_chats()
    
    if user_id not in chats:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    await callback.message.answer(f'<i><b>–°–µ–π—á–∞—Å –í—ã –æ–Ω–ª–∞–π–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {chats[user_id]["first_name"]}</b>\n –•–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏ –≤–æ–π—Ç–∏ –≤ —ç—Ç–æ—Ç —á–∞—Ç?</i>', reply_markup=confirm_keyboard(confirm_cb_name="confirmed_leave_user", uid=user_id))

    await callback.answer()


@confirmations_router.callback_query(F.data.startswith("confirmed_leave_user_"))
async def confirmed_leave_user(callback: types.CallbackQuery):
    if callback.from_user.id not in MANAGER_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    user_id = callback.data.split("_")[3]  # –ø–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
    chats = load_chats()
    if user_id not in chats:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return


    
    # --- –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º ---
    try:
        await callback.message.delete()
    except Exception:
        pass

    await callback.message.answer(
            f"üïä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω."
        )
# ------------------------------------------------------




# --- –ü–û–î–¢–í. –£–î–ê–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò–ó –ë–î ---
@confirmations_router.callback_query(F.data.startswith("confirm_delete_user_"))
async def confirm_delete_user(callback: types.CallbackQuery):
    if callback.from_user.id not in MANAGER_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    user_id = callback.data.split("_")[3]  # –ø–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
    chats = load_chats()
    
    if user_id not in chats:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    await callback.message.answer("<i><b>‚ùó‚ùó –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã?</b>\n –≠—Ç–æ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.</i>", reply_markup=confirm_keyboard(confirm_cb_name="confirmed_delete_user", uid=user_id))

    await callback.answer()

@confirmations_router.callback_query(F.data.startswith("confirmed_delete_user_"))
async def confirmed_delete_user(callback: types.CallbackQuery):
    if callback.from_user.id not in MANAGER_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    user_id = callback.data.split("_")[3]  # –ø–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
    chats = load_chats()
    if user_id not in chats:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    del chats[user_id]
    save_chats(chats)
    
    # --- –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º ---
    try:
        await callback.message.delete()
    except Exception:
        pass

    await callback.message.answer(
            f"üïä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω."
        )

# ---------------------------------------------------------




# --- –ü–û–î–¢–í. –û–ß–ò–°–¢–ö–£ –ò–°–¢–û–†–ò–ò ---
@confirmations_router.callback_query(F.data.startswith("confirm_clear_chat_history_"))
async def confirm_delete_user(callback: types.CallbackQuery):
    if callback.from_user.id not in MANAGER_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    user_id = callback.data.split("_")[4]  # –ø–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
    chats = load_chats()
    
    if user_id not in chats:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    if chats[user_id]["chat_history"] == []:
        await callback.answer("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
        return

    await callback.message.answer(f'<i><b>üßπ –•–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ —Å {chats[user_id]["first_name"]}?</b>\n</i>', reply_markup=confirm_keyboard(confirm_cb_name="confirmed_clear_chat_history", uid=user_id))

    await callback.answer()

@confirmations_router.callback_query(F.data.startswith("confirmed_clear_chat_history"))
async def confirmed_clear_chat_history(callback: types.CallbackQuery):
    if callback.from_user.id not in MANAGER_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    user_id = callback.data.split("_")[4]  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chats = load_chats()
    is_active = False

    
    if user_id not in chats:
        await callback.answer("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    chats[user_id]["chat_history"] = []
    save_chats(chats)

    data = chats.get(user_id)

    if data["status"] == "active":
        mark = 'üü¢'
        is_active = True
    else:
        mark = 'üî¥'

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏
    manager = chats[user_id].get("manager", None)
    username = f"@{chats[user_id]['username']}" if chats[user_id].get("username") else "‚Äî"

    text = (
        f"<b>–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:</b>\n"
        f"üë§ {data['first_name']} ({username}) {mark}"
        f"üÜî ID: {user_id}"
        f"üßë‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä: {manager['first_name'] if manager else '‚Äî'}"
        "\n-------------------------------\n"
        "üìú <b>–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:</b>\n\n"
        "üóë –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞."
    )

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        text,
        reply_markup=InActive_chat_control_keyboard(is_active=is_active, uid=user_id)
    )

    await callback.answer("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞")

# ---------------------------------------------------------






# –û–¢–ú–ï–ù–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø
@confirmations_router.callback_query(F.data.startswith("cancel_confirm"))
async def cancel_confirm(callback: types.CallbackQuery):
    if callback.from_user.id not in MANAGER_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    try:
        await callback.message.delete()
    except Exception:
        pass
# -----------------------------------------------