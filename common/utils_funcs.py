import json
from aiogram import types
from aiogram.fsm.context import FSMContext

from config import MANAGER_IDS, START_TEXT
from data.chat_storage_json import add_to_waiting, get_waiting_count, load_chats
from utils.keyboards import cities_keyboard, manager_request_keyboard
from utils.states import UserState

async def new_request(message: types.Message, state: FSMContext, user: types.User, city, group, init_message=""):
    username = user.username if user.username else "–ù–µ —É–∫–∞–∑–∞–Ω"
    first_name = user.first_name
    uid = user.id


    add_to_waiting(uid, first_name, username, init_message, message.date)
    
    chats = load_chats()

    user_info = (
        f'i>–ó–∞–ø—Ä–æ—Å –æ—Ç <b>{"üÜï –Ω–æ–≤–æ–≥–æ " if chats[str(uid)]["manager"] == None else ""}</b>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n</i>'
        f"üë§ –ò–º—è: {first_name}\n"
        f"üÜî ID: {uid}\n"
        f"üìõ Username: @{username}\n"
        f"üåÜ –ì–æ—Ä–æ–¥/–ì—Ä—É–ø–ø–∞: {city}/{group}\n\n"
        
        f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> <i>{init_message}</i>"
    )

    queue_info = f"\n\nüìä –í –æ—á–µ—Ä–µ–¥–∏: {get_waiting_count()} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

    for manager_id in MANAGER_IDS:
        try:
            await message.bot.send_message(
                manager_id,
                user_info + queue_info,
                reply_markup=manager_request_keyboard(str(user.id))
            )
            # —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.answer(
                "‚úÖ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</b>.\n"
                "‚è≥ <i>–û–∂–∏–¥–∞–π—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞..</i>\n\n"
                "<i>–í—ã —Å–º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –≤ –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ –ø—Ä—è–º–æ –∑–¥–µ—Å—å.</i>"
            )
        except Exception as e:
            # —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.answer(
                "‚ùå –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–º–æ–≥–ª–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_id}: {e}")

    await state.clear()


async def render_cities_start_pick(event: object, text=START_TEXT):
    message = event.message if isinstance(event, types.CallbackQuery) else event

    await message.answer(text=text,
        reply_markup=cities_keyboard()
    )

    if isinstance(event, types.CallbackQuery):  
        await event.answer()


# async def render_cities_groups_card(message: types.Message, city: str, state: FSMContext):
#     """–ü–æ–∫–∞–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞."""
#     with open("data/cities.json", "r", encoding="utf-8") as f:
#         cities = json.load(f)

#     city_data = cities.get(city)
#     if not city_data:
#         await message.edit_text("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=cities_keyboard())
#         return

#     text = (
#             f"üèôÔ∏è <b>{city}</b>\n\n"
#             f"üìä –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {city_data['subscribers']}\n"
#             f"üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ –º–µ—Å—è—Ü: {city_data['views']}\n"
#             f"üìù {city_data['description']}"
#         )
#     print("–ì–æ—Ä–æ–¥: " + city)
#     await state.update_data(picked_city=city)
#     await message.edit_text(text, reply_markup=pricing_keyboard(city))


async def msg_is_sent(msg: types.Message, receiver_id=0):
    chats = load_chats()
    if int(receiver_id) in MANAGER_IDS:
        receiver_first_name = "–ú–µ–Ω–µ–¥–∂–µ—Ä—É"
        await msg.answer(f"<i>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {receiver_first_name} üõ´</i>")
    elif receiver_id:
        receiver_first_name = chats.get(str(receiver_id), {}).get("first_name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
        await msg.answer(f"<i>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {receiver_first_name} üõ´</i>")
    else:
        await msg.answer(f"<i>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {receiver_id}, ???? üõ´</i>")
